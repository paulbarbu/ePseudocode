func car(l)
    daca lung(l) >= 1 atunci
        ret l[0]
    sfdaca

    ret l
sffunc


func concat(l1, l2)
    pt i=0; i<lung(l2); i=i+1 executa
        l1 = l1 + l2[i]
    sfpt

    ret l1
sffunc


struct point
    x = 0
    y = 0

    func translate(dx, dy)
        x = x+dx
        y = y+dy
        scrie("translate was called\n")
    sffunc

    move = func(new_x, new_y)
        x = new_x
        y = new_y
    sffunc
sfstruct


struct KeyVal
    key = ""
    val = ""
sfstruct


struct Dict
    _d = {}

    func insert(k, v)
        kv = KeyVal()
        kv.key = k
        kv.val = v

        _d = _d + kv
    sffunc


    func get(k, default)
        daca lung(_d) == 0 atunci
            ret default
        sfdaca

        pt i=lung(_d)-1; i>=0; i=i-1 executa
            daca _d[i].key == k atunci
                ret _d[i].val
            sfdaca
        sfpt

        ret default
    sffunc

    func min()
        m = _d[lung(_d)-1]

        pt i=lung(_d)-1; i>=0; i=i-1 executa
            daca get(_d[i].key, m.val) <  m.val atunci
                m = _d[i]
            sfdaca
        sfpt

        ret m
    sffunc
sfstruct


struct Node
    left = 0
    right = 0
    key = 0
    data = 0
sfstruct


func indexOf(needle, haystack)
    pt i=0; i<lung(haystack); i=i+1 executa
        daca needle == haystack[i] atunci
            ret i
        sfdaca
    sfpt

    ret -1
sffunc


func unique(list)
    u = {list[0]}

    pt i=1; i<lung(list); i=i+1 executa
        daca -1 == indexOf(list[i], u) atunci
            u = u + list[i]
        sfdaca
    sfpt

    ret u
sffunc
